{"version":3,"sources":["components/util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["userAccessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","console","log","name","artist","album","renderAction","TrackList","tracks","map","key","Id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playListTracks","onSave","spotify","getAccessToken","accessToken","window","location","href","match","expireIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","searchTerm","fetch","headers","authorization","then","response","json","jsonResponse","items","id","artists","uri","savePlayList","trackUriArray","userId","header","Authorization","method","body","JSON","stringify","playlistId","uris","App","playListName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackUriS","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9179e4a.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nconst clientId = 'e20df958b4f646dcac18490fc4a89488';\r\nconst redirectURI = 'http://lgmusicpartner.surge.sh'\r\nlet userAccessToken;\r\n\r\nvar spotify = {\r\n    getAccessToken() {\r\n        if (userAccessToken) {\r\n            return userAccessToken;\r\n        }\r\n\r\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\r\n        const expireIn = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessToken && expireIn) {\r\n            userAccessToken = accessToken[1];\r\n            const expiresIn = Number(expireIn[1]);\r\n            window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return userAccessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(searchTerm) {\r\n        const accessToken = spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\r\n            headers: {\r\n                authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                Id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }))\r\n        })\r\n    },\r\n\r\n    savePlayList(name, trackUriArray){\r\n        if(!name || !trackUriArray){\r\n            return;\r\n        }\r\n        const accessToken = spotify.getAccessToken();\r\n        const header = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n        let userId;\r\n        return fetch('https://api.spotify.com/v1/me', {headers:header}).then(response=>{\r\n            return response.json()\r\n        }).then(jsonResponse => {\r\n            userId = jsonResponse.id; \r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \r\n              {\r\n                headers: header, \r\n                method: 'POST',\r\n                body: JSON.stringify({name:name})\r\n            }).then(response=> response.json()).then(jsonResponse=>{\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\r\n                    headers: header,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uris: trackUriArray})\r\n                }) \r\n                })\r\n            })\r\n            \r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default spotify;","import React from 'react';\r\nimport './SearchBar.css' ; \r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {term: ''};\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        \r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({term:e.target.value});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n           <div className=\"SearchBar\">\r\n            <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n            <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n           </div> \r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className= \"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }\r\n        else {\r\n            return <button className=\"Track-action\" onClick = {this.addTrack} >+</button>\r\n        }\r\n    }\r\nrender(){\r\n    return(<div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n            {console.log(this.props.track.name)}\r\n            <h3>{this.props.track.name}</h3>\r\n            <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n    </div>\r\n    );\r\n}\r\n}","import React from 'react';\r\nimport './TrackList.css';\r\nimport { Track } from './../Track/Track'\r\n\r\nexport class TrackList extends React.Component {\r\n\r\n    render() \r\n    {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track =>{\r\n                    return <Track track={track}\r\n                              key = {track.Id} \r\n                              onAdd={this.props.onAdd} \r\n                              onRemove={this.props.onRemove} \r\n                              isRemoval={this.props.isRemoval} />;\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './SearchResults.css';\r\nimport {TrackList} from './../TrackList/TrackList'\r\n\r\nexport class SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval = {false}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Playlist.css'\r\nimport {TrackList} from './../TrackList/TrackList'\r\n\r\nexport class Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e){\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue = {'New Playlist'} onChange={this.handleNameChange}/>\r\n                <TrackList tracks = {this.props.playListTracks} \r\n                           onRemove = {this.props.onRemove} \r\n                           isRemoval={true}\r\n                           />\r\n\r\n                <button className = \"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { SearchBar } from './../SearchBar/SearchBar';\nimport {SearchResults} from './../SearchResults/SearchResults';\nimport {Playlist} from './../Playlist/Playlist';\nimport spotify from '../util/Spotify'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {searchResults: [],\n                  playListName: ['Playlist1'], \n                  playListTracks : []\n                }\n  this.addTrack = this.addTrack.bind(this);\n  this.removeTrack = this.removeTrack.bind(this);\n  this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  this.savePlayList = this.savePlayList.bind(this);\n  this.search = this.search.bind(this);\n}\n  addTrack(track){\n    let tracks=this.state.playListTracks;\n    if(tracks.find(savedTrack => savedTrack.id===track.id)){\n      return;\n    }\n    tracks.push(track); \n    this.setState({playListTracks : tracks});\n  }\n\n  removeTrack(track){\n    let tracks=this.state.playListTracks;\n    tracks = tracks.filter(currentTrack=>currentTrack.id!==track.id);\n    this.setState({playListTracks: tracks});\n    \n  }\n\n  updatePlaylistName(name){\n    this.setState({playListName:name});\n  }\n\n  savePlayList(){\n    const trackUriS = this.state.playListTracks.map(track=>track.uri);\n    spotify.savePlayList(this.state.playListName, trackUriS).then(()=>{\n      this.setState({\n        playListName: 'New Playlist',\n        playListTracks: []\n      })\n    })\n  }\n\n  search(searchTerm){\n    spotify.search(searchTerm).then(searchResults =>{\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render()\n  {\n    return (\n      <div>\n        <h1> Ja <span className=\"highlight\" > mmm </span>ing</h1>\n        <div className=\"App\" >\n          <SearchBar onSearch = {this.search}/>\n          <div className=\"App-playlist\" >\n            <SearchResults searchResults = {this.state.searchResults} \n                           onAdd={this.addTrack}\n                           />\n            <Playlist playListName = {this.state.playListName} \n                      playListTracks = {this.state.playListTracks} \n                      onRemove={this.removeTrack} \n                      onNameChange={this.updatePlaylistName}\n                      onSave = {this.savePlayList}\n                      />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}